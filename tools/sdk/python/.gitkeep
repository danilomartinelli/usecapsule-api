# Capsule Python SDK

SDK oficial da plataforma Capsule para Python.

## Características

### Versões Suportadas
- Python 3.8+
- Asyncio support (async/await)
- Type hints completos
- pydantic para validação

### Framework Integrations
- FastAPI middleware
- Django middleware
- Flask extensions
- Jupyter notebook support

## Funcionalidades Planejadas

### Client Base
```python
from capsule import Capsule
import asyncio

# Client síncrono
capsule = Capsule(
    api_key="your-api-key",
    base_url="https://api.usecapsule.com",
    timeout=30
)

# Client assíncrono
async def main():
    async with Capsule.async_client(api_key="key") as client:
        deployments = await client.deployments.list()
```

### Deploy Management
```python
# Deploy simples
deployment = capsule.deployments.create(
    name="python-app",
    image="python:3.11-slim",
    port=8000,
    env={
        "PYTHONPATH": "/app",
        "PYTHONUNBUFFERED": "1"
    },
    requirements="requirements.txt"
)

# Aguardar deploy
capsule.deployments.wait_for_ready(deployment.id, timeout=300)
```

### Streaming Logs
```python
# Generator para logs
for log_line in capsule.deployments.logs(deployment_id, follow=True):
    print(log_line)

# Async generator
async for log_line in capsule.deployments.logs_async(deployment_id):
    print(log_line)
```

### Data Science Integration
```python
# Jupyter notebook support
from capsule.jupyter import CapsuleWidget

widget = CapsuleWidget(api_key="key")
widget.deploy_notebook("my-model", "./model.ipynb")

# Pandas integration
import pandas as pd
df = capsule.metrics.get_dataframe(deployment_id, "1h")
```

## Estrutura Planejada

```
apps/tools/sdk/python/
├── capsule/
│   ├── __init__.py
│   ├── client.py
│   ├── resources/
│   │   ├── deployments.py
│   │   ├── projects.py
│   │   └── environments.py
│   ├── types/
│   └── utils/
├── capsule/integrations/
│   ├── fastapi/
│   ├── django/
│   ├── flask/
│   └── jupyter/
├── tests/
├── examples/
│   ├── basic_deploy.py
│   ├── fastapi_app.py
│   ├── data_science.ipynb
│   └── async_example.py
├── requirements.txt
├── setup.py
└── README.md
```

### Type Hints Completos

```python
from typing import Dict, List, Optional, Union
from pydantic import BaseModel

class DeploymentOptions(BaseModel):
    name: str
    image: str
    port: Optional[int] = None
    env: Optional[Dict[str, str]] = None
    replicas: Optional[int] = 1
    
class Deployment(BaseModel):
    id: str
    name: str
    status: str
    created_at: datetime
```

### FastAPI Middleware

```python
from fastapi import FastAPI
from capsule.integrations.fastapi import CapsuleMiddleware

app = FastAPI()
app.add_middleware(CapsuleMiddleware, 
    api_key="your-key",
    auto_log=True,
    metrics=True
)
```

### ML Model Deployment

```python
# Deploy modelo de ML
capsule.ml.deploy_model(
    name="sentiment-model",
    model_path="./model.pkl",
    runtime="sklearn",
    requirements=["scikit-learn==1.3.0", "pandas"]
)
```