# Capsule Go SDK

SDK oficial da plataforma Capsule para aplicações Go.

## Características

### Versões Suportadas
- Go 1.19+
- Módulos Go (go.mod)
- Context support nativo

### Integrations
- Gin middleware
- Echo middleware  
- Fiber middleware
- gRPC interceptors

## Funcionalidades Planejadas

### Client Base
```go
package main

import (
    "context"
    "github.com/usecapsule/go-sdk/capsule"
)

func main() {
    client := capsule.NewClient(&capsule.Config{
        APIKey: os.Getenv("CAPSULE_API_KEY"),
        BaseURL: "https://api.usecapsule.com",
        Timeout: 30 * time.Second,
    })
}
```

### Deploy Management
```go
// Deploy simples
deployment, err := client.Deployments.Create(ctx, &capsule.DeploymentOptions{
    Name:  "my-go-app",
    Image: "golang:1.21-alpine",
    Port:  8080,
    Env: map[string]string{
        "GOOS":        "linux",
        "CGO_ENABLED": "0",
    },
})
if err != nil {
    log.Fatal(err)
}

// Aguardar deploy
err = client.Deployments.WaitForReady(ctx, deployment.ID, 5*time.Minute)
```

### Streaming Logs
```go
logStream, err := client.Deployments.Logs(ctx, deploymentID, &capsule.LogOptions{
    Follow: true,
    Tail:   100,
})
if err != nil {
    log.Fatal(err)
}

for line := range logStream {
    fmt.Println(line)
}
```

### Middleware Gin
```go
import "github.com/usecapsule/go-sdk/middleware/gin"

r := gin.Default()
r.Use(capsule_gin.Middleware(&capsule_gin.Config{
    APIKey:   os.Getenv("CAPSULE_API_KEY"),
    AutoLog:  true,
    Metrics:  true,
}))
```

## Estrutura Planejada

```
apps/tools/sdk/go/
├── capsule/
│   ├── client.go
│   ├── deployments.go
│   ├── projects.go
│   ├── environments.go
│   └── auth.go
├── middleware/
│   ├── gin/
│   ├── echo/
│   └── fiber/
├── types/
├── examples/
│   ├── basic-deploy/
│   ├── gin-middleware/
│   └── grpc-service/
├── go.mod
├── go.sum
└── README.md
```

## Context Support

Todas as operações suportam context.Context:

```go
ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
defer cancel()

deployments, err := client.Deployments.List(ctx, &capsule.ListOptions{
    ProjectID: "project-123",
    Status:    capsule.StatusRunning,
})
```

## Error Handling

```go
type Error struct {
    Code    string `json:"code"`
    Message string `json:"message"`
    Details map[string]interface{} `json:"details,omitempty"`
}

func (e *Error) Error() string {
    return fmt.Sprintf("capsule: %s - %s", e.Code, e.Message)
}
```

## Concurrent Safe

Todos os clients são thread-safe e podem ser reutilizados across goroutines.