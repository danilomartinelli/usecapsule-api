# Capsule SDKs

Este diretório conterá os SDKs oficiais da plataforma Capsule para diferentes linguagens de programação.

## Linguagens Suportadas

### Implementações Planejadas

- **Node.js** - JavaScript/TypeScript SDK
- **Go** - Go SDK para aplicações backend
- **Python** - Python SDK para ML/Data apps
- **PHP** - PHP SDK para aplicações web
- **Ruby** - Ruby SDK para Rails apps
- **Rust** - Rust SDK para aplicações de alta performance

## Funcionalidades dos SDKs

### Core Features
- Autenticação com API keys/JWT
- Deploy de aplicações
- Gerenciamento de variáveis de ambiente
- Monitoramento e logs
- Rollback de deployments

### Operações Comuns
```javascript
// Exemplo Node.js SDK
const capsule = new Capsule({ apiKey: 'your-api-key' });

await capsule.deploy({
  name: 'my-app',
  image: 'node:18',
  env: { NODE_ENV: 'production' }
});

const status = await capsule.status('my-app');
const logs = capsule.logs('my-app').stream();
```

## Estrutura de Cada SDK

```
sdk/[language]/
├── src/
│   ├── client/
│   ├── resources/
│   │   ├── deployments/
│   │   ├── projects/
│   │   └── auth/
│   └── types/
├── tests/
├── examples/
├── docs/
├── package.[json|go.mod|requirements.txt]
└── README.md
```

## Distribuição

### Registries Planejados
- **Node.js**: npm (@usecapsule/sdk)
- **Go**: Go modules (github.com/usecapsule/go-sdk)
- **Python**: PyPI (capsule-sdk)
- **PHP**: Packagist (usecapsule/sdk)
- **Ruby**: RubyGems (capsule-sdk)
- **Rust**: crates.io (capsule-sdk)

## Padrões de Implementação

### Autenticação
- API Key authentication
- JWT token support
- Automatic token refresh

### Error Handling
- Consistent error types
- Retry logic with exponential backoff
- Comprehensive error messages

### HTTP Client
- Built-in rate limiting
- Request/response logging
- Timeout configuration
- SSL/TLS verification