name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '24'
  RABBITMQ_URL: 'amqp://test:test@localhost:5672'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          npm run test:unit || {
            echo "❌ Unit tests failed"
            echo "Checking for common issues..."
            npm list --depth=0 | grep -E '(jest|@types)' || echo "Jest packages not found"
            exit 1
          }
          echo "✅ Unit tests passed"

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: coverage/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      rabbitmq:
        image: rabbitmq:3.13-management
        env:
          RABBITMQ_DEFAULT_USER: test
          RABBITMQ_DEFAULT_PASS: test
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Wait for services
        run: |
          echo "Waiting for RabbitMQ..."
          timeout 120s bash -c 'until curl -s -f http://localhost:15672/api/overview -u test:test >/dev/null 2>&1; do echo "Waiting for RabbitMQ..."; sleep 3; done'
          echo "✅ RabbitMQ is ready"

          echo "Waiting for PostgreSQL..."
          timeout 120s bash -c 'until pg_isready -h localhost -p 5432 -U test >/dev/null 2>&1; do echo "Waiting for PostgreSQL..."; sleep 3; done'
          echo "✅ PostgreSQL is ready"

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          echo "Database URL: postgresql://test:test@localhost:5432/testdb"
          echo "RabbitMQ URL: amqp://test:test@localhost:5672"
          npm run test:integration || {
            echo "❌ Integration tests failed"
            echo "Checking service connectivity..."
            curl -s http://localhost:15672/api/overview -u test:test | jq .rabbitmq_version || echo "RabbitMQ not accessible"
            pg_isready -h localhost -p 5432 -U test || echo "PostgreSQL not ready"
            exit 1
          }
          echo "✅ Integration tests passed"
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/testdb'
          RABBITMQ_URL: 'amqp://test:test@localhost:5672'

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            coverage/
            test/integration/results/

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      rabbitmq:
        image: rabbitmq:3.13-management
        env:
          RABBITMQ_DEFAULT_USER: e2e
          RABBITMQ_DEFAULT_PASS: e2e
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build applications
        run: npm run build:all

      - name: Start API Gateway
        run: |
          echo "Starting API Gateway..."
          npm run serve:gateway &
          API_GATEWAY_PID=$!
          echo "API_GATEWAY_PID=$API_GATEWAY_PID" >> $GITHUB_ENV
          echo "API Gateway started with PID: $API_GATEWAY_PID"
        env:
          RABBITMQ_URL: 'amqp://e2e:e2e@localhost:5672'

      - name: Wait for API Gateway
        run: |
          echo "Waiting for API Gateway to be ready..."
          timeout 180s bash -c '
            while ! curl -s -f http://localhost:3000/health/ready >/dev/null 2>&1; do
              echo "API Gateway not ready yet, waiting..."
              sleep 5
            done
          '
          echo "✅ API Gateway is ready"
          # Verify the health endpoint returns expected data
          curl -s http://localhost:3000/health/ready | jq . || echo "Health endpoint response not JSON"

      - name: Run E2E tests
        run: |
          echo "Running E2E tests..."
          echo "Base URL: http://localhost:3000"
          echo "RabbitMQ URL: amqp://e2e:e2e@localhost:5672"
          # Final health check before tests
          curl -s http://localhost:3000/health/ready | jq . || {
            echo "❌ API Gateway health check failed before E2E tests"
            exit 1
          }
          npm run test:e2e || {
            echo "❌ E2E tests failed"
            echo "API Gateway logs (if available):"
            ps aux | grep 'nx serve api-gateway' || echo "No API Gateway processes found"
            exit 1
          }
          echo "✅ E2E tests passed"
        env:
          BASE_URL: 'http://localhost:3000'
          RABBITMQ_URL: 'amqp://e2e:e2e@localhost:5672'

      - name: Stop API Gateway
        if: always()
        run: |
          if [ ! -z "$API_GATEWAY_PID" ]; then
            kill $API_GATEWAY_PID || true
          fi

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test/e2e/results/
            coverage/

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Merge coverage reports
        run: |
          # Create merged coverage directory
          mkdir -p coverage-merged

          # Copy all coverage reports to merged directory
          find . -name "coverage" -type d | while read dir; do
            if [ -f "$dir/coverage-final.json" ]; then
              cp "$dir/coverage-final.json" "coverage-merged/coverage-$(basename $(dirname $dir)).json"
            fi
          done

          # Generate combined coverage report
          npx nyc merge coverage-merged coverage-merged/coverage-final.json
          npx nyc report --reporter=text --reporter=lcov --temp-dir=coverage-merged --report-dir=coverage-merged

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: coverage-merged/lcov.info

      - name: Upload merged coverage
        uses: actions/upload-artifact@v4
        with:
          name: merged-coverage
          path: coverage-merged/

  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run linting
        run: npm run lint

      - name: Check formatting
        run: npm run format -- --check

      - name: Type checking
        run: npx nx run-many --target=typecheck --all

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, lint-and-format]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
            echo "✅ Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "✅ Integration Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Integration Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "✅ E2E Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ E2E Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.lint-and-format.result }}" == "success" ]]; then
            echo "✅ Lint and Format: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Lint and Format: Failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail if any tests failed
        if: needs.unit-tests.result != 'success' || needs.integration-tests.result != 'success' || needs.e2e-tests.result != 'success' || needs.lint-and-format.result != 'success'
        run: exit 1
